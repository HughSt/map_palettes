# Load demo data
load("UV_USA_airports.RData") # object called input
setwd("/Users/hughsturrock/Documents/Work/MEI/DiSARM/GitRepos/demo-spatial-prediction")
# Load demo data
load("UV_USA_airports.RData") # object called input
names(input)
input$features
x<-sapply(input_file$features, function(x){x$geometry$coordinates[[1]]})
input_file <- input
x<-sapply(input_file$features, function(x){x$geometry$coordinates[[1]]})
y<- sapply(input_file$features, function(x){x$geometry$coordinates[[2]]})
z<-sapply(input_file$features, function(x){x$properties$outcome})
# fit model
gam_mod <- mgcv::gam(z ~ s(x, y, bs="gp", k=-1))
# generate prediction raster
max_num_cell <- 300
range_lng <- range(x)
range_lat <- range(y)
wide_or_tall <- which.max(c(diff(range_lng), diff(range_lat)))
cell_size <- abs(c(range_lng/max_num_cell, range_lat/max_num_cell)[wide_or_tall])
x_coords <- seq(range_lng[1], range_lng[2], cell_size)
y_coords <- seq(range_lat[1], range_lat[2], cell_size)
grid <- expand.grid(x_coords, y_coords)
names(grid) <- c("x", "y")
pred_raster <- rasterFromXYZ(data.frame(x=grid[,1], y=grid[,2], z=NA),
crs = CRS("+init=epsg:4326"))
# Predict
pred_grid <- as.data.frame(coordinates(pred_raster))
names(pred_grid) <- c("x", "y")
pred_raster[] <- as.vector(predict(gam_mod, pred_grid))
# Map
# First define colors
col_pal <- colorNumeric(wes_palette("Zissou1", 64, type = "continuous")[1:64],
values(pred_raster))
library(leaflet)
# Map
# First define colors
col_pal <- colorNumeric(wes_palette("Zissou1", 64, type = "continuous")[1:64],
values(pred_raster))
library(wesanderson)
# Map
# First define colors
col_pal <- colorNumeric(wes_palette("Zissou1", 64, type = "continuous")[1:64],
values(pred_raster))
map %>%
addRasterImage(pred_raster,
colors = col_pal,
opacity = 0.7) %>%
addLegend(pal = col_pal, values = values(pred_raster))
leaflet() %>%
addTiles("https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}{r}.png") %>%
addRasterImage(pred_raster,
colors = col_pal,
opacity = 0.7) %>%
addLegend(pal = col_pal, values = values(pred_raster))
spatial_df <- data.frame(x=x,
y=y,
z=z)
getwd()
write.csv(spatial_df,"/Users/hughsturrock/Dropbox/Anna/Interpolation/demo_spatial_df.csv")
library(raster)
raster::getData("GADM", country="USA", level=0)
crop_polygon <- readOGR("/Users/hughsturrock/Dropbox/Anna/Interpolation/", "SWZ_adm0")
library(rgdal)
crop_polygon <- readOGR("/Users/hughsturrock/Dropbox/Anna/Interpolation/", "SWZ_adm0")
crop_polygon <- readOGR("/Users/hughsturrock/Dropbox/Anna/Interpolation", "SWZ_adm0")
crop_polygon <- readOGR("Users/hughsturrock/Dropbox/Anna/Interpolation", "SWZ_adm0")
crop_polygon <- readOGR("Users/hughsturrock/Dropbox/Anna/Interpolation/", "SWZ_adm0")
crop_polygon <- readOGR("Users/hughsturrock/Dropbox/Anna/Interpolation", "SWZ_adm0")
library(sf)
?st_read
crop_polygon <- st_read("Users/hughsturrock/Dropbox/Anna/Interpolation", "SWZ_adm0")
crop_polygon <- st_read("/Users/hughsturrock/Dropbox/Anna/Interpolation", "SWZ_adm0")
crop_polygon <- readOGR("/Users/hughsturrock/Dropbox/Anna/Interpolation/Bay_delta",
"Bay_delta_selection")
crop_polygon
plot(crop_polygon)
setwd("/Users/hughsturrock/Documents/Work/MEI/DiSARM/GitRepos/map_palettes")
?create
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
devtools::install_github("klutometis/roxygen")
install.packages("roxygen2")
?create
create("map_palettes")
create("mappalettes")
paste("#1D3141,#0D5962,#0E8472,#52AE6E,#A5D25F", sep=",")
paste("","#1D3141,#0D5962,#0E8472,#52AE6E,#A5D25F", sep=",")
paste(#1D3141,#0D5962,#0E8472,#52AE6E,#A5D25F, sep=",")
}
print(#1D3141,#0D5962,#0E8472,#52AE6E,#A5D25F)
print("#1D3141,#0D5962,#0E8472,#52AE6E,#A5D25F")
?paste
paste("#1D3141,#0D5962,#0E8472,#52AE6E,#A5D25F", sep=",", collapse = "")
paste("#1D3141,#0D5962,#0E8472,#52AE6E,#A5D25F", sep=",", collapse = "'")
paste("#1D3141,#0D5962,#0E8472,#52AE6E,#A5D25F", sep=",", collapse = FALSE)
paste("#1D3141,#0D5962,#0E8472,#52AE6E,#A5D25F", sep=",", collapse = TRUE)
paste("#1D3141,#0D5962,#0E8472,#52AE6E,#A5D25F", sep="'", collapse = TRUE)
paste("#1D3141,#0D5962,#0E8472,#52AE6E,#A5D25F", sep="'")
paste("#1D3141,#0D5962,#0E8472,#52AE6E,#A5D25F")
paste("#1D3141,#0D5962,#0E8472,#52AE6E,#A5D25F", collapse="")
paste("#1D3141,#0D5962,#0E8472,#52AE6E,#A5D25F", collapse="'")
substr
n<-64
library(RColorBrewer)
brewer.pal()
brewer.pal
?brewer.pal
colorRampPalette(c("#1D3141","#0D5962","#0E8472","#52AE6E","#A5D25F"))
palette <- c("#1D3141","#0D5962","#0E8472","#52AE6E","#A5D25F")
pal <- colorRampPalette(palette)
pal(10)
pal(2)
plot(pal)
plot(pal(2))
plot(c(1,1), c(1,2), pch=16, col=pal(2),cex=5)
plot(c(1,1), c(1,2), pch=16, col=pal(3),cex=5)
map_palette <- function(name,
n){
if(name=="hugh_div"){
palette <- c("#1D3141","#0D5962","#0E8472","#52AE6E","#A5D25F")
}
pal <- colorRampPalette(palette)
pal(n)
}
map_palette <- function(name,
n=5){
if(name=="hugh_div"){
palette <- c("#1D3141","#0D5962","#0E8472","#52AE6E","#A5D25F")
}
pal <- colorRampPalette(palette)
pal(n)
}
map_palette("hugh_div")
map_palette("hugh_div", n=10)
elev <- raster::getData('alt', country="SWZ")
setwd("/Users/hughsturrock/Documents/Work/MEI/Namibia/Data")
elev <- raster::getData('alt', country="SWZ")
plot(elev, col=map_palette("hugh_div", n=10))
plot(elev, col=map_palette("hugh_div", n=5))
plot(elev, col=map_palette("hugh_div", n=64))
map_palette <- function(name,
n=5){
if(name=="hugh_div"){
palette <- c("#1D3141","#096168","#209478","#75C56E","#E2EE5E")
}
pal <- colorRampPalette(palette)
pal(n)
}
plot(elev, col=map_palette("hugh_div", n=64))
setwd("./mappalettes")
setwd("/Users/hughsturrock/Documents/Work/MEI/DiSARM/GitRepos/map_palettes")
setwd("./mappalettes")
document()
setwd("..")
getwd()
install("mappalettes")
?map_palette
setwd("./mappalettes")
document()
setwd("..")
install("mappalettes")
?map_palette
?install_github
install_github("HughSt/mappalettes")
install_github("HughSt/map_palettes")
install_github("HughSt/mappalettes")
install_github("HughSt/mappalettes/mappalettes")
plot(elev, col=map_palette("hugh_div", n=64), axes=F)
plot(elev, col=map_palette("hugh_div", n=10), axes=F)
plot(elev, col=map_palette("hugh_div", n=20), axes=F)
plot(elev, col=map_palette("hugh_div", n=64), axes=F)
# Get crop polygon
crop_polygon <- readOGR("/Users/hughsturrock/Dropbox/Anna/Interpolation/Bay_delta",
"Bay_delta_selection")
?crop
?extent
# Get georeferenced counts
# in this case I'll make them up
crop_polygon <- crop(crop_polygon, extent(37.75, 38.45, -122.27, -121.22))
plot(crop_polygon)
crop_polygon
# Get crop polygon
crop_polygon <- readOGR("/Users/hughsturrock/Dropbox/Anna/Interpolation/Bay_delta",
"Bay_delta_selection")
crop_polygon
?crs
elev
crop_polygon <- spTransform(crop_polygon, crs(+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0 ))
crop_polygon <- spTransform(crop_polygon, crs("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
crop_polygon
# Get georeferenced counts
# in this case I'll make them up
crop_polygon <- crop(crop_polygon, extent(37.75, 38.45, -122.27, -121.22))
crop_polygon
# Get crop polygon
crop_polygon <- readOGR("/Users/hughsturrock/Dropbox/Anna/Interpolation/Bay_delta",
"Bay_delta_selection")
crop_polygon <- spTransform(crop_polygon, crs("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
crop_polygon
# Get georeferenced counts
# in this case I'll make them up
crop_polygon <- crop(crop_polygon, extent(-122.27, -121.22, 37.75, 38.45 ))
crop_polygon
plot(crop_polygon)
runif(-122.27, -121.22, 1)
?runif
runif(1, -122.27, -121.22
)
obs_points <- data.frame(x = sample(runif(50, -122.27, -121.22),
)
obs_points
obs_points <- data.frame(x = sample(runif(50, -122.27, -121.22),
y = sample(runif(50, 37.75, 38.45)),
z = runif(50, 0, 1)))
obs_points <- data.frame(x = runif(50, -122.27, -121.22),
y = runif(50, 37.75, 38.45),
z = runif(50, 0, 1))
obs_points
obs_points <- data.frame(x = runif(50, -122.27, -121.22),
y = runif(50, 37.75, 38.45),
z = round(runif(50, 0, 100), 0))
obs_points
library(mgcv)
library(leaflet)
library(wesanderson)
# Interpolation function
# Requires vectors of x and y coordinates
# and values (z)
# As well as a SpatialPolygons object used to
# crop predictions
GAM_interpolate <- function(x,
y,
z,
crop_polygon){
# fit model
gam_mod <- mgcv::gam(z ~ s(x, y, bs="gp", k=-1))
# generate prediction raster
max_num_cell <- 300
range_lng <- range(x)
range_lat <- range(y)
wide_or_tall <- which.max(c(diff(range_lng), diff(range_lat)))
cell_size <- abs(c(range_lng/max_num_cell, range_lat/max_num_cell)[wide_or_tall])
x_coords <- seq(range_lng[1], range_lng[2], cell_size)
y_coords <- seq(range_lat[1], range_lat[2], cell_size)
grid <- expand.grid(x_coords, y_coords)
names(grid) <- c("x", "y")
pred_raster <- rasterFromXYZ(data.frame(x=grid[,1], y=grid[,2], z=NA),
crs = CRS("+init=epsg:4326"))
# Predict
pred_grid <- as.data.frame(coordinates(pred_raster))
names(pred_grid) <- c("x", "y")
pred_raster[] <- as.vector(predict(gam_mod, pred_grid))
# Crop using the provided crop raster
pred_raster <- crop(pred_raster, crop_polygon)
# Map
# First define colors
col_pal <- colorNumeric(wes_palette("Zissou1", 64, type = "continuous")[1:64],
values(pred_raster))
leaflet() %>%
addTiles("https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}{r}.png") %>%
addRasterImage(pred_raster,
colors = col_pal,
opacity = 0.7) %>%
addLegend(pal = col_pal, values = values(pred_raster))
}
# Test
GAM_interpolate(obs_points$x,
obs_points$y,
obs_points$z,
crop_polygon)
x<-obs_points$x
y<-obs_points$y
z<-obs_points$z
# fit model
gam_mod <- mgcv::gam(z ~ s(x, y, bs="gp", k=-1))
# generate prediction raster
max_num_cell <- 300
range_lng <- range(x)
range_lat <- range(y)
wide_or_tall <- which.max(c(diff(range_lng), diff(range_lat)))
cell_size <- abs(c(range_lng/max_num_cell, range_lat/max_num_cell)[wide_or_tall])
x_coords <- seq(range_lng[1], range_lng[2], cell_size)
y_coords <- seq(range_lat[1], range_lat[2], cell_size)
grid <- expand.grid(x_coords, y_coords)
dim(grid)
range(x)
range(y)
wide_or_tall
cell_size
range_lng
max_num_cell
range_lat
max_num_cell
range
?range
abs(range(x))
diff(range(x))
range_lng <- diff(range(x))
range_lat <- diff(range(y))
wide_or_tall <- which.max(c(diff(range_lng), diff(range_lat)))
cell_size <- abs(c(range_lng/max_num_cell, range_lat/max_num_cell)[wide_or_tall])
cell_size
range_lng/max_num_cell
range_lat/max_num_cell
c(range_lng/max_num_cell, range_lat/max_num_cell)
c(range_lng/max_num_cell, range_lat/max_num_cell)[wide_or_tall]
wide_or_tall
range_lng <- range(x)
range_lat <- range(y)
wide_or_tall <- which.max(c(diff(range_lng), diff(range_lat)))
cell_size <- abs(c(diff(range_lng)/max_num_cell, diff(range_lat)/max_num_cell)[wide_or_tall])
cell_size
x_coords <- seq(range_lng[1], range_lng[2], cell_size)
y_coords <- seq(range_lat[1], range_lat[2], cell_size)
grid <- expand.grid(x_coords, y_coords)
dim(grid)
names(grid) <- c("x", "y")
pred_raster <- rasterFromXYZ(data.frame(x=grid[,1], y=grid[,2], z=NA),
crs = CRS("+init=epsg:4326"))
# Predict
pred_grid <- as.data.frame(coordinates(pred_raster))
names(pred_grid) <- c("x", "y")
pred_raster[] <- as.vector(predict(gam_mod, pred_grid))
# Crop using the provided crop raster
pred_raster <- crop(pred_raster, crop_polygon)
# Map
# First define colors
col_pal <- colorNumeric(wes_palette("Zissou1", 64, type = "continuous")[1:64],
values(pred_raster))
leaflet() %>%
addTiles("https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}{r}.png") %>%
addRasterImage(pred_raster,
colors = col_pal,
opacity = 0.7) %>%
addLegend(pal = col_pal, values = values(pred_raster))
# Crop using the provided crop raster
pred_raster <- mask(pred_raster, crop_polygon)
# Map
# First define colors
col_pal <- colorNumeric(wes_palette("Zissou1", 64, type = "continuous")[1:64],
values(pred_raster))
leaflet() %>%
addTiles("https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}{r}.png") %>%
addRasterImage(pred_raster,
colors = col_pal,
opacity = 0.7) %>%
addLegend(pal = col_pal, values = values(pred_raster))
# Map
# First define colors
col_pal <- colorNumeric(wes_palette("Zissou1", 64, type = "continuous")[1:64],
values(pred_raster), na.color = NA)
leaflet() %>%
addTiles("https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}{r}.png") %>%
addRasterImage(pred_raster,
colors = col_pal,
opacity = 0.7) %>%
addLegend(pal = col_pal, values = values(pred_raster))
GAM_interpolate(obs_points$x,
obs_points$y,
obs_points$z,
crop_polygon)
library(mgcv)
library(leaflet)
library(wesanderson)
# Interpolation function
# Requires vectors of x and y coordinates
# and values (z)
# As well as a SpatialPolygons object used to
# crop predictions
GAM_interpolate <- function(x,
y,
z,
crop_polygon){
# fit model
gam_mod <- mgcv::gam(z ~ s(x, y, bs="gp", k=-1))
# generate prediction raster
max_num_cell <- 300
range_lng <- range(x)
range_lat <- range(y)
wide_or_tall <- which.max(c(diff(range_lng), diff(range_lat)))
cell_size <- abs(c(diff(range_lng)/max_num_cell, diff(range_lat)/max_num_cell)[wide_or_tall])
x_coords <- seq(range_lng[1], range_lng[2], cell_size)
y_coords <- seq(range_lat[1], range_lat[2], cell_size)
grid <- expand.grid(x_coords, y_coords)
names(grid) <- c("x", "y")
pred_raster <- rasterFromXYZ(data.frame(x=grid[,1], y=grid[,2], z=NA),
crs = CRS("+init=epsg:4326"))
# Predict
pred_grid <- as.data.frame(coordinates(pred_raster))
names(pred_grid) <- c("x", "y")
pred_raster[] <- as.vector(predict(gam_mod, pred_grid))
# Crop using the provided crop raster
pred_raster <- mask(pred_raster, crop_polygon)
# Map
# First define colors
col_pal <- colorNumeric(wes_palette("Zissou1", 64, type = "continuous")[1:64],
values(pred_raster), na.color = NA)
leaflet() %>%
addTiles("https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}{r}.png") %>%
addRasterImage(pred_raster,
colors = col_pal,
opacity = 0.7) %>%
addLegend(pal = col_pal, values = values(pred_raster))
}
GAM_interpolate(obs_points$x,
obs_points$y,
obs_points$z,
crop_polygon)
leaflet() %>%
addTiles("https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}{r}.png") %>%
addRasterImage(pred_raster,
colors = col_pal,
opacity = 0.7) %>%
addCircleMarkers(x, y, popup = as.character(z), radius = 3) %>%
addLegend(pal = col_pal, values = values(pred_raster))
getwd()
library(devtools)
document()
document()
get_colors_from_image("/Users/hughsturrock/Downloads/water.jpg")
library(imager)
get_colors_from_image("/Users/hughsturrock/Downloads/water.jpg")
library(macgick)
library(magick)
get_colors_from_image("/Users/hughsturrock/Downloads/water.jpg", 10)
library(raster)
get_colors_from_image("/Users/hughsturrock/Downloads/water.jpg", 10)
get_colors_from_image("/Users/hughsturrock/Downloads/water.jpg", 15)
get_colors_from_image("/Users/hughsturrock/Downloads/neon_flamingo.jpg", 15)
get_colors_from_image("/Users/hughsturrock/Downloads/neon_flamingo.jpg", 5)
get_colors_from_image("/Users/hughsturrock/Downloads/neon_flamingo.jpg", 10)
get_colors_from_image("/Users/hughsturrock/Downloads/neon_flamingo.jpg", 3)
get_colors_from_image("/Users/hughsturrock/Downloads/neon_flamingo.jpg", 4)
get_colors_from_image("/Users/hughsturrock/Downloads/neon_flamingo.jpg", 5)
get_colors_from_image("/Users/hughsturrock/Downloads/neon_flamingo.jpg", 6)
get_colors_from_image("/Users/hughsturrock/Downloads/neon_flamingo.jpg", 7)
get_colors_from_image("/Users/hughsturrock/Downloads/neon_flamingo.jpg", 8)
library(devtools)
document()
library(MapPalettes)
?get_colors_from_image
library(devtools)
document()
library(devtools)
install_github("disarm-platform/MapPalettes")
library(MapPalettes)
get_colors_from_image("https://upload.wikimedia.org/wikipedia/commons/e/e3/Red-eyed_Tree_Frog_%28Agalychnis_callidryas%29_1.png",
n = 8)
library(devtools)
install_github("disarm-platform/MapPalettes")
library(MapPalettes)
get_colors_from_image("https://upload.wikimedia.org/wikipedia/commons/e/e3/Red-eyed_Tree_Frog_%28Agalychnis_callidryas%29_1.png",
n = 8)
elevation <- raster::getData('alt', country="SWZ")
hexbins <- hexbin_raster(elevation, n=300, function(x) mean(x, na.rm = TRUE))
document
document()
?hexbin_raster
document()
library(devtools)
install_github("disarm-platform/MapPalettes")
library(MapPalettes)
get_colors_from_image("https://upload.wikimedia.org/wikipedia/commons/e/e3/Red-eyed_Tree_Frog_%28Agalychnis_callidryas%29_1.png",
n = 8)
elevation <- raster::getData('alt', country="SWZ")
hexbins <- hexbin_raster(elevation, n=300, function(x) mean(x, na.rm = TRUE))
library(MapPalettes)
hexbins <- hexbin_raster(elevation, n=300, function(x) mean(x, na.rm = TRUE))
?hexbin_raster
document()
library(devtools)
document()
document()
library(devtools)
install_github("disarm-platform/MapPalettes")
library(MapPalettes)
?hexbin_raster
?get_colors_from_image
get_colors_from_image("https://upload.wikimedia.org/wikipedia/commons/e/e3/Red-eyed_Tree_Frog_%28Agalychnis_callidryas%29_1.png",
n = 6)
elevation <- raster::getData('alt', country="SWZ")
hexbins <- hexbin_raster(elevation, n=300, function(x) mean(x, na.rm = TRUE))
library(raster)
document()
library(devtools)
install_github("disarm-platform/MapPalettes")
library(MapPalettes)
get_colors_from_image("https://upload.wikimedia.org/wikipedia/commons/e/e3/Red-eyed_Tree_Frog_%28Agalychnis_callidryas%29_1.png",
n = 6)
library(devtools)
install_github("disarm-platform/MapPalettes")
library(MapPalettes)
get_colors_from_image("https://upload.wikimedia.org/wikipedia/commons/e/e3/Red-eyed_Tree_Frog_%28Agalychnis_callidryas%29_1.png",
n = 6)
view_palette("bruiser")
document()
library(devtools)
install_github("disarm-platform/MapPalettes")
library(MapPalettes)
get_colors_from_image("https://upload.wikimedia.org/wikipedia/commons/e/e3/Red-eyed_Tree_Frog_%28Agalychnis_callidryas%29_1.png",
n = 6)
document()
document()
library(devtools)
install_github("disarm-platform/MapPalettes")
library(MapPalettes)
elevation <- raster::getData('alt', country="SWZ")
hexbins <- hexbin_raster(elevation, n=300, function(x) mean(x, na.rm = TRUE))
col_pal <- colorNumeric(map_palette("bruiser", n=10), hexbins$stat)
document()
