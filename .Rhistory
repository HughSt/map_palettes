mean= -2,
time = time)
simulate_risk <- function(seed, var, scale, mean, time = NULL, nrow=256, ncol=256){
# Simluate a risk surface based on elevation + GP
set.seed(seed)
model <- RMexp(var=var, scale=scale)
set.seed(seed)
simu <- RFsimulate(model, x=1:ncol, T = time,
y=1:nrow, RFoptions(spConform=FALSE))
browser()
# Convert to raster
if(is.null(time)){
simu_raster <- raster(nrows = nrow, ncol = ncol, xmn=0, xmx=1, ymn=0, ymx=1)
simu_raster[] <- as.vector(simu)
}else{
simu_stack <- raster(nrows = nrow, ncol = ncol, xmn=0, xmx=1, ymn=0, ymx=1)
layer_index <- sort(rep(1:length(time), nrow*ncol))
for(i in 1:length(time)){
simu_raster <- raster(nrows = nrow, ncol = ncol, xmn=0, xmx=1, ymn=0, ymx=1)
simu_raster[] <- simu$variable1[layer_index == i]
simu_stack <- stack(simu_stack, simu_raster)
}
}
# Add mean
log_odds_raster <- mean + simu_stack
# Convert to probability
prev_raster <- exp(log_odds_raster) / (1 + exp(log_odds_raster))
names(prev_raster) <- rep("prev_raster", max(time))
return(prev_raster)
}
# Simluate some data
time = seq(1,100,10)
risk_raster <- simulate_risk(seed=1981,
var=0.5,
scale=20,
mean= -2,
time = time)
simu_stack <- raster(nrows = nrow, ncol = ncol, xmn=0, xmx=1, ymn=0, ymx=1)
layer_index <- sort(rep(1:length(time), nrow*ncol))
for(i in 1:length(time)){
simu_raster <- raster(nrows = nrow, ncol = ncol, xmn=0, xmx=1, ymn=0, ymx=1)
simu_raster[] <- simu$variable1[layer_index == i]
simu_stack <- stack(simu_stack, simu_raster)
}
# Add mean
log_odds_raster <- mean + simu_stack
# Convert to probability
prev_raster <- exp(log_odds_raster) / (1 + exp(log_odds_raster))
names(prev_raster) <- rep("prev_raster", length(time))
prev_raster
plot(prev_raster[[1]])
plot(prev_raster[[2]])
plot(prev_raster[[3]])
plot(prev_raster[[4]])
plot(prev_raster[[5]])
plot(prev_raster)
source("~/Documents/Work/MEI/DiSARM/GitRepos/useful_r_functions/useful_r_functions.R")
# Simluate some data
time = seq(1,50,5)
time
risk_raster <- simulate_risk(seed=1981,
var=0.5,
scale=20,
mean= -2,
time = time)
plot(risk_raster)
# Simulate some villages
villages <- simulate_villages(seed=1981,
kappa=10,
scale=0.2,
mu=200,
ref_raster = risk_raster[[1]])
plot(risk_raster[[1]])
points(villages)
# Take a sample
n_villages <- 250
n_ind <- 100
survey_points <- villages[sample(1:nrow(villages), n_villages),]
# Spread across the n time points
n_t <- dim(risk_raster)[3]
survey_points$t <- as.numeric(cut(survey_points$id, n_t))
survey_points$prev <- NULL
for(i in 1:n_t){
survey_points$prev[survey_points$t == i] <- extract(risk_raster[[i]],survey_points[survey_points$t == i,])
}
survey_points$n_pos <- rbinom(n_villages, n_ind, survey_points$prev)
survey_points$n_neg <- n_ind - survey_points$n_pos
#### spaMM
library(spaMM)
lfit <- fitme(cbind(n_pos, n_neg) ~
Matern(1|x+y+t),
data=survey_points@data,
family=binomial())
plot(predict(lfit), survey_points$prev)
lfit <- fitme(cbind(n_pos, n_neg) ~
Matern(1|x+y),
data=survey_points@data,
family=binomial())
plot(predict(lfit), survey_points$prev)
lfit <- fitme(cbind(n_pos, n_neg) ~
Matern(1|x+y+t),
data=survey_points@data,
family=binomial())
plot(predict(lfit), survey_points$prev)
# Predict for any time point
par(mfrow=c(3,3))
pal <- colorNumeric(tim.colors(), c(0, 0.7))
for(i in 1:9){
pred_raster <- gen_pred_stack(risk_raster[[1]])
time_raster <- pred_raster[[1]]
time_raster[] <- i; names(time_raster) <- "t"
pred_raster <- stack(pred_raster, time_raster)
predictions <- predict(pred_raster, lfit)
plot(predictions)
}
lfit <- fitme(cbind(n_pos, n_neg) ~
Matern(1|x+y) + Matern(1|t),
data=survey_points@data,
family=binomial())
plot(predict(lfit), survey_points$prev)
lfit
lfit <- fitme(cbind(n_pos, n_neg) ~
Matern(t|x+y),
data=survey_points@data,
family=binomial())
lfit <- fitme(cbind(n_pos, n_neg) ~ 1 +
Matern(t|x+y),
data=survey_points@data,
family=binomial())
lfit <- fitme(cbind(n_pos, n_neg) ~
Matern(t||x+y),
data=survey_points@data,
family=binomial())
lfit <- fitme(cbind(n_pos, n_neg) ~
Matern(0+t|x+y),
data=survey_points@data,
family=binomial())
plot(predict(lfit), survey_points$prev)
par(mfrow=c(3,3))
pal <- colorNumeric(tim.colors(), c(0, 0.7))
for(i in 1:9){
pred_raster <- gen_pred_stack(risk_raster[[1]])
time_raster <- pred_raster[[1]]
time_raster[] <- i; names(time_raster) <- "t"
pred_raster <- stack(pred_raster, time_raster)
predictions <- predict(pred_raster, lfit)
plot(predictions)
}
dim(risk_raster)
plot(risk_raster[[1:9]])
time = seq(1,50,5)
risk_raster <- simulate_risk(seed=1981,
var=0.5,
scale=50,
mean= -2,
time = time)
villages <- simulate_villages(seed=1981,
kappa=10,
scale=0.2,
mu=200,
ref_raster = risk_raster[[1]])
plot(risk_raster[[1]])
points(villages)
# Take a sample
n_villages <- 250
n_ind <- 100
survey_points <- villages[sample(1:nrow(villages), n_villages),]
# Spread across the n time points
n_t <- dim(risk_raster)[3]
survey_points$t <- as.numeric(cut(survey_points$id, n_t))
survey_points$prev <- NULL
for(i in 1:n_t){
survey_points$prev[survey_points$t == i] <- extract(risk_raster[[i]],survey_points[survey_points$t == i,])
}
survey_points$n_pos <- rbinom(n_villages, n_ind, survey_points$prev)
survey_points$n_neg <- n_ind - survey_points$n_pos
#### spaMM
library(spaMM)
lfit <- fitme(cbind(n_pos, n_neg) ~
Matern(0+t|x+y),
data=survey_points@data,
family=binomial())
plot(predict(lfit), survey_points$prev)
par(mfrow=c(3,3))
pal <- colorNumeric(tim.colors(), c(0, 0.7))
for(i in 1:9){
pred_raster <- gen_pred_stack(risk_raster[[1]])
time_raster <- pred_raster[[1]]
time_raster[] <- i; names(time_raster) <- "t"
pred_raster <- stack(pred_raster, time_raster)
predictions <- predict(pred_raster, lfit)
plot(predictions)
}
plot(risk_raster[[1:9]])
lfit <- fitme(cbind(n_pos, n_neg) ~
#Matern(0+t|x+y),
Matern(1|x+y) + Matern(1|t),
data=survey_points@data,
family=binomial())
par(mfrow=c(3,3))
pal <- colorNumeric(tim.colors(), c(0, 0.7))
for(i in 1:9){
pred_raster <- gen_pred_stack(risk_raster[[1]])
time_raster <- pred_raster[[1]]
time_raster[] <- i; names(time_raster) <- "t"
pred_raster <- stack(pred_raster, time_raster)
predictions <- predict(pred_raster, lfit)
plot(predictions)
}
plot(predict(lfit), survey_points$prev)
lfit <- fitme(cbind(n_pos, n_neg) ~
Matern(0+t|x+y),
#Matern(1|x+y) + Matern(1|t),
data=survey_points@data,
family=binomial())
lfit
pred_raster <- gen_pred_stack(risk_raster[[1]])
time_raster <- pred_raster[[1]]
time_raster[] <- 60
names(time_raster) <- "t"
pred_raster <- stack(pred_raster, time_raster)
predictions <- predict(pred_raster, lfit)
plot(predictions)
table(survey_points@data$t)
par(mfrow=c(3,3))
pal <- colorNumeric(tim.colors(), c(0, 0.7))
for(i in 11:19){
pred_raster <- gen_pred_stack(risk_raster[[1]])
time_raster <- pred_raster[[1]]
time_raster[] <- i; names(time_raster) <- "t"
pred_raster <- stack(pred_raster, time_raster)
predictions <- predict(pred_raster, lfit)
plot(predictions)
}
rm(list=ls())
library(sp)
library(sf)
library(geojsonio)
library(mgcv)
library(leaflet)
library(oro.nifti)
# Get Liberia adm2
adm2 <- raster::getData("GADM", country="LBR", level=2)
sch_data <- read.csv("~/Downloads/Sm_liberia_targeting_demo.csv")
sch_data
getwd()
head(sch_data)
sch_data$Npos
sch_data <- read.csv("~/Documents/Work/MEI/DiSARM/GitRepos/targeting_demo/Sm_cdi_demo_data.csv")
# Get Liberia adm2
adm2 <- raster::getData("GADM", country="CDI", level=2)
ccodes()
# Get Liberia adm2
adm2 <- raster::getData("GADM", country="CIV", level=2)
sch_data_sp <- SpatialPointsDataFrame(SpatialPoints(sch_data[,c("lng", "lat")]),
sch_data[,c("country_school", "school","country",
"Nex", "Npos")])
names(sch_data_sp)[4:5] <- c("n_trials", "n_positive")
input_data_list <- list(
points = geojson_list(sch_data_sp),
layer_names = c("elev_m",
"dist_to_water_m",
"dist_to_road_m",
"bioclim1",
"bioclim4",
"bioclim12",
"bioclim15")
)
library(httr)
response <-
httr::POST(
url = "https://faas.srv.disarm.io/function/fn-covariate-extractor",
body = as.json(input_data_list),
content_type_json(),
timeout(900)
)
response_content <- content(response)
points_sf <- st_read(as.json(response_content$result), quiet=TRUE)
points_sf_df <- as.data.frame(points_sf)
points_sf_df$lng <- sch_data$lng
points_sf_df$lat <- sch_data$lat
points_sf_df$n_neg <- as.numeric(as.character(points_sf_df$n_trials)) -
as.numeric(as.character(points_sf_df$n_positive))
# Fit GAM and predict
gam_mod <- gam(cbind(n_positive, n_neg) ~ s(elev_m) + s(dist_to_water_m) +
s(dist_to_road_m) + s(bioclim1) + s(bioclim4) +
s(lng, lat),
family="binomial",
data = points_sf_df)
points_sf$pred <- predict(gam_mod, newdata = points_sf_df, type="response")
# Map
col_pal <- colorNumeric(tim.colors(), points_sf$pred)
leaflet() %>% addTiles() %>%
addCircleMarkers(data = points_sf,
color = col_pal(points_sf$pred),
radius=3)
# Take sample per adm2
which_dist <- as.data.frame(st_within(points_sf, st_as_sf(adm2)))
points_sf$which_dist <- NA
points_sf$which_dist[which_dist$row.id] <- which_dist$col.id
points_sf <- subset(points_sf, !is.na(points_sf$which_dist))
points_sf_per_adm2 <- split(points_sf, points_sf$which_dist)
sample <- lapply(points_sf_per_adm2, function(x){x[sample(1:nrow(x),2, replace = TRUE),]})
sample <- do.call('rbind', sample)
sample <- as(sample, "Spatial")
points_sf <- as(points_sf, "Spatial")
# Generate adm2
adm2$prev <- NA
adm2_prev <- tapply(sample$pred, sample$which_dist, mean)
adm2$prev[as.numeric(names(adm2_prev))] <-  tapply(sample$pred, sample$which_dist, mean)
plot(adm2, col = col_pal(adm2$prev))
shiny::runApp('Documents/Work/MEI/DiSARM/GitRepos/targeting_demo')
sch_data <- read.csv("~/Downloads/Sh_liberia_targeting_demo.csv")
# Get Liberia adm2
adm2 <- raster::getData("GADM", country="LBR", level=2)
sch_data_sp <- SpatialPointsDataFrame(SpatialPoints(sch_data[,c("lng", "lat")]),
sch_data[,c("country_school", "school","country",
"Nex", "Npos")])
names(sch_data_sp)[4:5] <- c("n_trials", "n_positive")
input_data_list <- list(
points = geojson_list(sch_data_sp),
layer_names = c("elev_m",
"dist_to_water_m",
"dist_to_road_m",
"bioclim1",
"bioclim4",
"bioclim12",
"bioclim15")
)
library(httr)
response <-
httr::POST(
url = "https://faas.srv.disarm.io/function/fn-covariate-extractor",
body = as.json(input_data_list),
content_type_json(),
timeout(900)
)
response_content <- content(response)
points_sf <- st_read(as.json(response_content$result), quiet=TRUE)
points_sf_df <- as.data.frame(points_sf)
points_sf_df$lng <- sch_data$lng
points_sf_df$lat <- sch_data$lat
points_sf_df$n_neg <- as.numeric(as.character(points_sf_df$n_trials)) -
as.numeric(as.character(points_sf_df$n_positive))
# Fit GAM and predict
gam_mod <- gam(cbind(n_positive, n_neg) ~ s(elev_m) + s(dist_to_water_m) +
s(dist_to_road_m) + s(bioclim1) + s(bioclim4) +
s(lng, lat),
family="binomial",
data = points_sf_df)
points_sf$pred <- predict(gam_mod, newdata = points_sf_df, type="response")
# Map
col_pal <- colorNumeric(tim.colors(), points_sf$pred)
leaflet() %>% addTiles() %>%
addCircleMarkers(data = points_sf,
color = col_pal(points_sf$pred),
radius=3)
which_dist <- as.data.frame(st_within(points_sf, st_as_sf(adm2)))
points_sf$which_dist <- NA
points_sf$which_dist[which_dist$row.id] <- which_dist$col.id
points_sf <- subset(points_sf, !is.na(points_sf$which_dist))
points_sf_per_adm2 <- split(points_sf, points_sf$which_dist)
sample <- lapply(points_sf_per_adm2, function(x){x[sample(1:nrow(x),2, replace = TRUE),]})
sample <- do.call('rbind', sample)
sample <- as(sample, "Spatial")
points_sf <- as(points_sf, "Spatial")
adm2$prev <- NA
adm2_prev <- tapply(sample$pred, sample$which_dist, mean)
adm2$prev[as.numeric(names(adm2_prev))] <-  tapply(sample$pred, sample$which_dist, mean)
plot(adm2, col = col_pal(adm2$prev))
save(adm2,
points_sf,
sample,
file="~/Documents/Work/MEI/DiSARM/GitRepos/targeting_demo/targeting_demo_data2.RData")
runApp('Documents/Work/MEI/DiSARM/GitRepos/targeting_demo')
runApp('Documents/Work/MEI/DiSARM/GitRepos/targeting_demo')
runApp('Documents/Work/MEI/DiSARM/GitRepos/targeting_demo')
runApp('Documents/Work/MEI/DiSARM/GitRepos/targeting_demo')
library(sp)
library(sf)
library(geojsonio)
library(mgcv)
library(leaflet)
library(oro.nifti)
# Get Liberia adm2
adm2 <- raster::getData("GADM", country="LBR", level=2)
sch_data <- read.csv("~/Downloads/Sh_liberia_targeting_demo.csv")
# Make more heterogeneous
sch_data$Npos <- round(sch_data$Npos^2, 0) / 30
hist(sch_data$Npos)
hist(sch_data$Npos)
sch_data <- read.csv("~/Downloads/Sh_liberia_targeting_demo.csv")
hist(sch_data$Npos)
sch_data$Npos
# Make more heterogeneous
sch_data$Npos <- round(sch_data$Npos^2, 0) / 30
sch_data_sp <- SpatialPointsDataFrame(SpatialPoints(sch_data[,c("lng", "lat")]),
sch_data[,c("country_school", "school","country",
"Nex", "Npos")])
names(sch_data_sp)[4:5] <- c("n_trials", "n_positive")
input_data_list <- list(
points = geojson_list(sch_data_sp),
layer_names = c("elev_m",
"dist_to_water_m",
"dist_to_road_m",
"bioclim1",
"bioclim4",
"bioclim12",
"bioclim15")
)
library(httr)
response <-
httr::POST(
url = "https://faas.srv.disarm.io/function/fn-covariate-extractor",
body = as.json(input_data_list),
content_type_json(),
timeout(900)
)
response_content <- content(response)
points_sf <- st_read(as.json(response_content$result), quiet=TRUE)
points_sf_df <- as.data.frame(points_sf)
points_sf_df$lng <- sch_data$lng
points_sf_df$lat <- sch_data$lat
points_sf_df$n_neg <- as.numeric(as.character(points_sf_df$n_trials)) -
as.numeric(as.character(points_sf_df$n_positive))
# Fit GAM and predict
gam_mod <- gam(cbind(n_positive, n_neg) ~ s(elev_m) + s(dist_to_water_m) +
s(dist_to_road_m) + s(bioclim1) + s(bioclim4) +
s(lng, lat),
family="binomial",
data = points_sf_df)
points_sf$pred <- predict(gam_mod, newdata = points_sf_df, type="response")
# Map
col_pal <- colorNumeric(tim.colors(), points_sf$pred)
leaflet() %>% addTiles() %>%
addCircleMarkers(data = points_sf,
color = col_pal(points_sf$pred),
radius=3)
which_dist <- as.data.frame(st_within(points_sf, st_as_sf(adm2)))
points_sf$which_dist <- NA
points_sf$which_dist[which_dist$row.id] <- which_dist$col.id
points_sf <- subset(points_sf, !is.na(points_sf$which_dist))
points_sf_per_adm2 <- split(points_sf, points_sf$which_dist)
sample <- lapply(points_sf_per_adm2, function(x){x[sample(1:nrow(x),2, replace = TRUE),]})
sample <- do.call('rbind', sample)
sample <- as(sample, "Spatial")
points_sf <- as(points_sf, "Spatial")
adm2$prev <- NA
adm2_prev <- tapply(sample$pred, sample$which_dist, mean)
adm2$prev[as.numeric(names(adm2_prev))] <-  tapply(sample$pred, sample$which_dist, mean)
plot(adm2, col = col_pal(adm2$prev))
save(adm2,
points_sf,
sample,
file="~/Documents/Work/MEI/DiSARM/GitRepos/targeting_demo/targeting_demo_data3.RData")
runApp('Documents/Work/MEI/DiSARM/GitRepos/targeting_demo')
runApp('Documents/Work/MEI/DiSARM/GitRepos/targeting_demo')
naive_vector_dot <- function(x, y) {
z <- 0
for (i in 1:length(x))
z <- z + x[[i]] * y[[i]]
z
}
naive_vector_dot(c(1:10), 1:5)
naive_vector_dot(c(1:10), 2:11)
naive_relu <- function(x) {
for (i in nrow(x))
for (j in ncol(x))
x[i, j] <- max(x[i, j], 0)
x
}
test_mat <- matrix(1:10,1:10)
test_mat
test_mat <- matrix(1:10,1:10, nrow=10,ncol=10)
test_mat
naive_relu(test_mat)
test_mat <- matrix(1:10,2:11, nrow=10,ncol=10)
test_mat
test_mat <- matrix(1:7,nrow=10,ncol=10)
test_mat <- matrix(1:100,nrow=10,ncol=10)
test_mat
naive_relu(test_mat)
?spaMM
library(spaMM)
?fitme
?Matern
install.packages("keras")
library(keras)
install_keras()
shiny::runApp('Documents/Work/MEI/DiSARM/GitRepos/targeting_demo')
runApp('Documents/Work/MEI/DiSARM/GitRepos/targeting_demo')
runApp('Documents/Work/MEI/DiSARM/GitRepos/targeting_demo')
runApp('Documents/Work/MEI/DiSARM/GitRepos/targeting_demo')
runApp('Documents/Work/MEI/DiSARM/GitRepos/targeting_demo')
runApp('Documents/Work/MEI/DiSARM/GitRepos/targeting_demo')
runApp('Documents/Work/MEI/DiSARM/GitRepos/targeting_demo')
?draw_new_feature
library(MapPalettes)
?view_palette
?get_colors_from_image
library(devtools)
install_github("disarm-platform/MapPalettes")
library(MapPalettes)
?view_palette
library(MapPalettes)
?view_palettes
?view_palette
setwd("~/Documents/Work/MEI/DiSARM/GitRepos/map_palettes")
document()
library(devtools)
document()
document()
